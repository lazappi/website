[
  {
    "task_id": "batch_integration",
    "method_id": "bbknn",
    "method_name": "BBKNN",
    "method_summary": "BBKNN creates k nearest neighbours graph by identifying neighbours within batches, then combining and processing them with UMAP for visualization.",
    "is_baseline": false,
    "paper_reference": "polanski2020bbknn",
    "code_url": "https://github.com/Teichlab/bbknn",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/bbknn/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "combat",
    "method_name": "Combat",
    "method_summary": "Adjusting batch effects in microarray expression data using empirical Bayes methods",
    "is_baseline": false,
    "paper_reference": "hansen2012removing",
    "code_url": "https://scanpy.readthedocs.io/en/stable/api/scanpy.pp.combat.html",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/combat/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "fastmnn_embedding",
    "method_name": "fastMnn (embedding)",
    "method_summary": "A simpler version of the original mnnCorrect algorithm.",
    "is_baseline": false,
    "paper_reference": "haghverdi2018batch",
    "code_url": "https://code.bioconductor.org/browse/batchelor/",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/fastmnn_embedding/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "fastmnn_feature",
    "method_name": "fastMnn (feature)",
    "method_summary": "A simpler version of the original mnnCorrect algorithm.",
    "is_baseline": false,
    "paper_reference": "haghverdi2018batch",
    "code_url": "https://code.bioconductor.org/browse/batchelor/",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/fastmnn_feature/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "liger",
    "method_name": "LIGER",
    "method_summary": "Linked Inference of Genomic Experimental Relationships",
    "is_baseline": false,
    "paper_reference": "welch2019single",
    "code_url": "https://github.com/welch-lab/liger",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/liger/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "mnn_correct",
    "method_name": "mnnCorrect",
    "method_summary": "Correct for batch effects in single-cell expression data using the mutual nearest neighbors method.",
    "is_baseline": false,
    "paper_reference": "haghverdi2018batch",
    "code_url": "https://code.bioconductor.org/browse/batchelor/",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/mnn_correct/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "mnnpy",
    "method_name": "mnnpy",
    "method_summary": "Batch effect correction by matching mutual nearest neighbors, Python implementation.",
    "is_baseline": false,
    "paper_reference": "hie2019efficient",
    "code_url": "https://github.com/chriscainx/mnnpy",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/mnnpy/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "pyliger",
    "method_name": "pyliger",
    "method_summary": "Python implementation of LIGER (Linked Inference of Genomic Experimental Relationships",
    "is_baseline": false,
    "paper_reference": "welch2019single",
    "code_url": "https://github.com/welch-lab/pyliger",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/pyliger/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "scalex_embed",
    "method_name": "SCALEX (embedding)",
    "method_summary": "Online single-cell data integration through projecting heterogeneous datasets into a common cell-embedding space",
    "is_baseline": false,
    "paper_reference": "xiong2021online",
    "code_url": "https://github.com/jsxlei/SCALEX",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/scalex_embed/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "scalex_feature",
    "method_name": "SCALEX (feature)",
    "method_summary": "Online single-cell data integration through projecting heterogeneous datasets into a common cell-embedding space",
    "is_baseline": false,
    "paper_reference": "xiong2021online",
    "code_url": "https://github.com/jsxlei/SCALEX",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/scalex_feature/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "scanorama_embed",
    "method_name": "Scanorama (embedding)",
    "method_summary": "Efficient integration of heterogeneous single-cell transcriptomes using Scanorama",
    "is_baseline": false,
    "paper_reference": "hie2019efficient",
    "code_url": "https://github.com/brianhie/scanorama",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/scanorama_embed/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "scanorama_feature",
    "method_name": "Scanorama (feature)",
    "method_summary": "Efficient integration of heterogeneous single-cell transcriptomes using Scanorama",
    "is_baseline": false,
    "paper_reference": "hie2019efficient",
    "code_url": "https://github.com/brianhie/scanorama",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/scanorama_feature/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "scanvi",
    "method_name": "ScanVI",
    "method_summary": "ScanVI is a deep learning method that considers cell type labels.",
    "is_baseline": false,
    "paper_reference": "lopez2018deep",
    "code_url": "https://github.com/YosefLab/scvi-tools",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/scanvi/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "scvi",
    "method_name": "scVI",
    "method_summary": "scVI combines a variational autoencoder with a hierarchical Bayesian model.",
    "is_baseline": false,
    "paper_reference": "lopez2018deep",
    "code_url": "https://github.com/YosefLab/scvi-tools",
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/methods/scvi/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "no_integration_batch",
    "method_name": "No integration by Batch",
    "method_summary": "Cells are embedded by computing PCA independently on each batch",
    "is_baseline": true,
    "paper_reference": null,
    "code_url": null,
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/control_methods/no_integration_batch/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "random_embed_cell",
    "method_name": "Random Embedding by Celltype",
    "method_summary": "Cells are embedded as a one-hot encoding of celltype labels",
    "is_baseline": true,
    "paper_reference": null,
    "code_url": null,
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/control_methods/random_embed_cell/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "random_embed_cell_jitter",
    "method_name": "Random Embedding by Celltype with jitter",
    "method_summary": "Cells are embedded as a one-hot encoding of celltype labels, with a small amount of random noise added to the embedding",
    "is_baseline": true,
    "paper_reference": null,
    "code_url": null,
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/control_methods/random_embed_cell_jitter/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  },
  {
    "task_id": "batch_integration",
    "method_id": "random_integration",
    "method_name": "Random integration",
    "method_summary": "Feature values, embedding coordinates, and graph connectivity are all randomly permuted.",
    "is_baseline": true,
    "paper_reference": null,
    "code_url": null,
    "implementation_url": "https://github.com/openproblems-bio/openproblems-v2/tree/2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a/src/tasks/batch_integration/control_methods/random_integration/config.vsh.yaml",
    "code_version": null,
    "commit_sha": "2ebb7c01db18f3e3498c4d144020a7e6f4ce0f1a"
  }
]
