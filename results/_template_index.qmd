
```{r noninteractive}
#| include: false
#| eval: false
path <- 'results/batch_integration_embed'
task_id <- 'batch_integration_embed'
```


```{r setup}
#| include: false
#| error: true
library(tidyverse)
library(funkyheatmap)

knitr::opts_chunk$set(error = TRUE)

method_info <- jsonlite::read_json(paste0(path, "/method_info.json"), simplifyVector = TRUE) %>%
  mutate(
    method_base_name = gsub(" \\(.*", "", method_name)
  )

metric_info <- jsonlite::read_json(paste0(path, "/metric_info.json"), simplifyVector = TRUE)
dataset_info <- jsonlite::read_json(paste0(path, "/dataset_info.json"), simplifyVector = TRUE)
results <- jsonlite::read_json(paste0(path, "/results.json"), simplifyVector = TRUE)
```


```{r}
#| echo: false
results_long <-
  inner_join(
    results %>%
      gather(metric_id, value, any_of(metric_info$metric_id)) %>%
      mutate(value = ifelse(is.na(value), NA_real_, value)) %>%
      select(method_id, dataset_id, metric_id, value),
    results %>%
      gather(metric_id, score, any_of(paste0(metric_info$metric_id, "_scaled"))) %>%
      mutate(metric_id = sub("_scaled$", "", metric_id)) %>%
      select(method_id, dataset_id, metric_id, score),
    by = c("method_id", "dataset_id", "metric_id")
  ) %>%
  left_join(method_info %>% select(method_id, is_baseline), "method_id")

overall_ranking <- results_long %>%
  group_by(method_id) %>%
  summarise(mean_score = mean(score)) %>%
  arrange(desc(mean_score))

# order by ranking
results_long$method_id <- factor(results_long$method_id, levels = rev(overall_ranking$method_id))
```

```{r}
#| echo: false
#| message: false
per_dataset <- results_long %>%
  group_by(method_id, dataset_id) %>%
  summarise(score = mean(score), .groups = "drop") %>%
  mutate(dataset_id = paste0("dataset_", dataset_id)) %>%
  spread(dataset_id, score)
per_metric <- results_long %>%
  group_by(method_id, metric_id) %>%
  summarise(score = mean(score), .groups = "drop") %>%
  mutate(metric_id = paste0("metric_", metric_id)) %>%
  spread(metric_id, score)

summary_all <- 
  method_info %>%
  transmute(
    method_id,
    method_name,
    method_is_baseline = ifelse(is_baseline, "yes", "")
  ) %>%
  left_join(overall_ranking, by = "method_id") %>%
  left_join(per_dataset, by = "method_id") %>%
  left_join(per_metric, by = "method_id") %>%
  arrange(desc(mean_score))
summary_base <- 
  method_info %>%
  transmute(
    method_id,
    method_name = method_base_name,
    method_is_baseline = ifelse(is_baseline, "yes", "")
  ) %>%
  left_join(overall_ranking, by = "method_id") %>%
  group_by(method_name) %>%
  slice(which.max(mean_score)) %>%
  ungroup() %>%
  arrange(desc(mean_score)) %>%
  left_join(per_dataset, by = "method_id") %>%
  left_join(per_metric, by = "method_id") %>%
  arrange(desc(mean_score))

column_info <- tibble(
  id = colnames(summary_all)[-1],
  name = id %>%
    gsub("^[^_]+_", "", .) %>%
    gsub("_", " ", .) %>%
    str_to_title(),
  group = gsub("_.*", "", id),
  geom = case_when(
    group == "method" ~ "text",
    group == "mean" ~ "bar",
    group %in% c("dataset", "metric") ~ "funkyrect"
  ),
  palette = ifelse(group %in% c("mean", "dataset", "metric"), group, NA_character_),
  options = map2(id, geom, function(id, geom) {
    if (id == "method_name") {
      list(width = 10, hjust = 0)
    } else if (id == "is_baseline") {
      list(width = 1)
    } else if (geom == "bar") {
      list(width = 4)
    } else {
      list()
    }
  })
)

g_all <- funky_heatmap(
  data = summary_all,
  column_info = column_info,
  expand = c(xmax = 3),
  col_annot_offset = 4
)
g_base <- funky_heatmap(
  data = summary_base,
  column_info = column_info,
  expand = c(xmax = 3),
  col_annot_offset = 4
)
```


::: {.panel-tabset}

## Per method

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = g_base$width,
  fig.height = g_base$height
)
```

```{r}
#| echo: false
g_base
```

## Per paramset

```{r}
#| include: false
knitr::opts_chunk$set(
  fig.width = g_all$width,
  fig.height = g_all$height
)
```

```{r}
#| echo: false
g_all
```

:::

## Quality control

To do
